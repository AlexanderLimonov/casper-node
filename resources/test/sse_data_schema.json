{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SseData",
  "description": "The \"data\" field of the events sent on the event stream to clients.",
  "oneOf": [
    {
      "description": "The version of this node's API server.  This event will always be the first sent to a new client, and will have no associated event ID provided.",
      "type": "object",
      "required": [
        "ApiVersion"
      ],
      "properties": {
        "ApiVersion": {
          "$ref": "#/definitions/ProtocolVersion"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given block has been added to the linear chain and stored locally.",
      "type": "object",
      "required": [
        "BlockAdded"
      ],
      "properties": {
        "BlockAdded": {
          "type": "object",
          "required": [
            "block",
            "block_hash"
          ],
          "properties": {
            "block_hash": {
              "$ref": "#/definitions/BlockHash"
            },
            "block": {
              "$ref": "#/definitions/JsonBlock"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given deploy has been newly-accepted by this node.",
      "type": "object",
      "required": [
        "DeployAccepted"
      ],
      "properties": {
        "DeployAccepted": {
          "type": "object",
          "required": [
            "deploy"
          ],
          "properties": {
            "deploy": {
              "description": "a deploy",
              "allOf": [
                {
                  "$ref": "#/definitions/Deploy"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given deploy has been executed, committed and forms part of the given block.",
      "type": "object",
      "required": [
        "DeployProcessed"
      ],
      "properties": {
        "DeployProcessed": {
          "type": "object",
          "required": [
            "account",
            "block_hash",
            "dependencies",
            "deploy_hash",
            "execution_result",
            "timestamp",
            "ttl"
          ],
          "properties": {
            "deploy_hash": {
              "$ref": "#/definitions/DeployHash"
            },
            "account": {
              "$ref": "#/definitions/PublicKey"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "ttl": {
              "$ref": "#/definitions/TimeDiff"
            },
            "dependencies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeployHash"
              }
            },
            "block_hash": {
              "$ref": "#/definitions/BlockHash"
            },
            "execution_result": {
              "$ref": "#/definitions/ExecutionResult"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The given deploy has expired.",
      "type": "object",
      "required": [
        "DeployExpired"
      ],
      "properties": {
        "DeployExpired": {
          "type": "object",
          "required": [
            "deploy_hash"
          ],
          "properties": {
            "deploy_hash": {
              "$ref": "#/definitions/DeployHash"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Generic representation of validator's fault in an era.",
      "type": "object",
      "required": [
        "Fault"
      ],
      "properties": {
        "Fault": {
          "type": "object",
          "required": [
            "era_id",
            "public_key",
            "timestamp"
          ],
          "properties": {
            "era_id": {
              "$ref": "#/definitions/EraId"
            },
            "public_key": {
              "$ref": "#/definitions/PublicKey"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "New finality signature received.",
      "type": "object",
      "required": [
        "FinalitySignature"
      ],
      "properties": {
        "FinalitySignature": {
          "$ref": "#/definitions/FinalitySignature"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The execution effects produced by a `StepRequest`.",
      "type": "object",
      "required": [
        "Step"
      ],
      "properties": {
        "Step": {
          "type": "object",
          "required": [
            "era_id",
            "execution_effects"
          ],
          "properties": {
            "era_id": {
              "$ref": "#/definitions/EraId"
            },
            "execution_effects": {
              "$ref": "#/definitions/ExecutionJournal"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The node is about to shut down.",
      "type": "string",
      "enum": [
        "Shutdown"
      ]
    }
  ],
  "definitions": {
    "ProtocolVersion": {
      "description": "Casper Platform protocol version",
      "type": "string"
    },
    "BlockHash": {
      "description": "Hex-encoded cryptographic hash of a block.",
      "type": "string"
    },
    "JsonBlock": {
      "description": "A block after execution, with the resulting global state root hash. This is the core component of the Casper linear blockchain",
      "type": "object",
      "required": [
        "body",
        "hash",
        "header",
        "proofs"
      ],
      "properties": {
        "hash": {
          "description": "The block hash identifying this block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "header": {
          "description": "The header portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/JsonBlockHeader"
            }
          ]
        },
        "body": {
          "description": "The body portion of the block.",
          "allOf": [
            {
              "$ref": "#/definitions/JsonBlockBody"
            }
          ]
        },
        "proofs": {
          "description": "The proofs of the block, i.e. a collection of validators' signatures of the block hash.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonProof"
          }
        }
      },
      "additionalProperties": false
    },
    "JsonBlockHeader": {
      "description": "The header portion of a block.",
      "type": "object",
      "required": [
        "accumulated_seed",
        "body_hash",
        "era_id",
        "height",
        "parent_hash",
        "protocol_version",
        "random_bit",
        "state_root_hash",
        "timestamp"
      ],
      "properties": {
        "parent_hash": {
          "description": "The parent block's hash.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "state_root_hash": {
          "description": "The root hash of global state after the deploys in this block have been executed.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "body_hash": {
          "description": "The hash of the block's body.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "random_bit": {
          "description": "A random bit needed for initializing a future era.",
          "type": "boolean"
        },
        "accumulated_seed": {
          "description": "A seed needed for initializing a future era.",
          "allOf": [
            {
              "$ref": "#/definitions/Digest"
            }
          ]
        },
        "era_end": {
          "description": "The `EraEnd` of a block if it is a switch block.",
          "anyOf": [
            {
              "$ref": "#/definitions/JsonEraEnd"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "description": "The timestamp from when the block was proposed.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "era_id": {
          "description": "The era ID in which this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "height": {
          "description": "The height of this block, i.e. the number of ancestors.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "protocol_version": {
          "description": "The protocol version of the network from when this block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/ProtocolVersion"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Digest": {
      "description": "Hex-encoded hash digest.",
      "type": "string"
    },
    "JsonEraEnd": {
      "description": "Information related to the end of an era, and validator weights for the following era.",
      "type": "object",
      "required": [
        "era_report",
        "next_era_validator_weights"
      ],
      "properties": {
        "era_report": {
          "description": "Equivocation, reward and validator inactivity information.",
          "allOf": [
            {
              "$ref": "#/definitions/JsonEraReport"
            }
          ]
        },
        "next_era_validator_weights": {
          "description": "The validators for the upcoming era and their respective weights.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonValidatorWeight"
          }
        }
      },
      "additionalProperties": false
    },
    "JsonEraReport": {
      "description": "Equivocation, reward and validator inactivity information.",
      "type": "object",
      "required": [
        "equivocators",
        "inactive_validators",
        "rewards"
      ],
      "properties": {
        "equivocators": {
          "description": "The set of equivocators.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        },
        "rewards": {
          "description": "Rewards for finalization of earlier blocks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonReward"
          }
        },
        "inactive_validators": {
          "description": "Validators that haven't produced any unit during the era.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicKey"
          }
        }
      },
      "additionalProperties": false
    },
    "PublicKey": {
      "description": "Hex-encoded cryptographic public key, including the algorithm tag prefix.",
      "type": "string"
    },
    "JsonReward": {
      "description": "A validator's public key paired with a measure of the value of its contribution to consensus, as a fraction of the configured maximum block reward.",
      "type": "object",
      "required": [
        "amount",
        "validator"
      ],
      "properties": {
        "validator": {
          "description": "The validator's public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "amount": {
          "description": "The reward amount.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "JsonValidatorWeight": {
      "description": "A validator's public key paired with its weight, i.e. the total number of motes staked by it and its delegators.",
      "type": "object",
      "required": [
        "validator",
        "weight"
      ],
      "properties": {
        "validator": {
          "description": "The validator's public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "weight": {
          "description": "The validator's weight.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "U512": {
      "description": "Decimal representation of a 512-bit integer.",
      "type": "string"
    },
    "Timestamp": {
      "description": "Timestamp formatted as per RFC 3339",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "EraId": {
      "description": "Era ID newtype.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "JsonBlockBody": {
      "description": "The body portion of a block.",
      "type": "object",
      "required": [
        "deploy_hashes",
        "proposer",
        "transfer_hashes"
      ],
      "properties": {
        "proposer": {
          "description": "The public key of the validator which proposed the block.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "deploy_hashes": {
          "description": "The deploy hashes of the non-transfer deploys within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        },
        "transfer_hashes": {
          "description": "The deploy hashes of the transfers within the block.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        }
      },
      "additionalProperties": false
    },
    "DeployHash": {
      "description": "Hex-encoded deploy hash.",
      "type": "string"
    },
    "JsonProof": {
      "description": "A validator's public key paired with a corresponding signature of a given block hash.",
      "type": "object",
      "required": [
        "public_key",
        "signature"
      ],
      "properties": {
        "public_key": {
          "description": "The validator's public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "signature": {
          "description": "The validator's signature.",
          "allOf": [
            {
              "$ref": "#/definitions/Signature"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Signature": {
      "description": "Hex-encoded cryptographic signature, including the algorithm tag prefix.",
      "type": "string"
    },
    "Deploy": {
      "description": "A signed smart contract.",
      "type": "object",
      "required": [
        "approvals",
        "hash",
        "header",
        "payment",
        "session"
      ],
      "properties": {
        "hash": {
          "$ref": "#/definitions/DeployHash"
        },
        "header": {
          "$ref": "#/definitions/DeployHeader"
        },
        "payment": {
          "$ref": "#/definitions/ExecutableDeployItem"
        },
        "session": {
          "$ref": "#/definitions/ExecutableDeployItem"
        },
        "approvals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          },
          "uniqueItems": true
        }
      },
      "additionalProperties": false
    },
    "DeployHeader": {
      "description": "The header portion of a [`Deploy`].",
      "type": "object",
      "required": [
        "account",
        "body_hash",
        "chain_name",
        "dependencies",
        "gas_price",
        "timestamp",
        "ttl"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/PublicKey"
        },
        "timestamp": {
          "$ref": "#/definitions/Timestamp"
        },
        "ttl": {
          "$ref": "#/definitions/TimeDiff"
        },
        "gas_price": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "body_hash": {
          "$ref": "#/definitions/Digest"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployHash"
          }
        },
        "chain_name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TimeDiff": {
      "description": "Human-readable duration.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "ExecutableDeployItem": {
      "description": "The executable component of a [`Deploy`].",
      "oneOf": [
        {
          "description": "Executable specified as raw bytes that represent Wasm code and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "ModuleBytes"
          ],
          "properties": {
            "ModuleBytes": {
              "type": "object",
              "required": [
                "args",
                "module_bytes"
              ],
              "properties": {
                "module_bytes": {
                  "description": "Hex-encoded raw Wasm bytes.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored contract referenced by its [`ContractHash`], entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredContractByHash"
          ],
          "properties": {
            "StoredContractByHash": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "hash"
              ],
              "properties": {
                "hash": {
                  "description": "Hex-encoded contract hash.",
                  "type": "string"
                },
                "entry_point": {
                  "description": "Name of an entry point.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredContractByName"
          ],
          "properties": {
            "StoredContractByName": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Named key.",
                  "type": "string"
                },
                "entry_point": {
                  "description": "Name of an entry point.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored versioned contract referenced by its [`ContractPackageHash`], entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredVersionedContractByHash"
          ],
          "properties": {
            "StoredVersionedContractByHash": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "hash"
              ],
              "properties": {
                "hash": {
                  "description": "Hex-encoded contract package hash.",
                  "type": "string"
                },
                "version": {
                  "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "entry_point": {
                  "description": "Entry point name.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stored versioned contract referenced by a named key existing in the signer's account context, entry point and an instance of [`RuntimeArgs`].",
          "type": "object",
          "required": [
            "StoredVersionedContractByName"
          ],
          "properties": {
            "StoredVersionedContractByName": {
              "type": "object",
              "required": [
                "args",
                "entry_point",
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Named key.",
                  "type": "string"
                },
                "version": {
                  "description": "An optional version of the contract to call. It will default to the highest enabled version if no value is specified.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "entry_point": {
                  "description": "Entry point name.",
                  "type": "string"
                },
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A native transfer which does not contain or reference a Wasm code.",
          "type": "object",
          "required": [
            "Transfer"
          ],
          "properties": {
            "Transfer": {
              "type": "object",
              "required": [
                "args"
              ],
              "properties": {
                "args": {
                  "description": "Runtime arguments.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/RuntimeArgs"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RuntimeArgs": {
      "description": "Represents a collection of arguments passed to a smart contract.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NamedArg"
      }
    },
    "NamedArg": {
      "description": "Named arguments to a contract.",
      "type": "array",
      "items": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/CLValue"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "CLValue": {
      "description": "A Casper value, i.e. a value which can be stored and manipulated by smart contracts.\n\nIt holds the underlying data as a type-erased, serialized `Vec<u8>` and also holds the CLType of the underlying data as a separate member.\n\nThe `parsed` field, representing the original value, is a convenience only available when a CLValue is encoded to JSON, and can always be set to null if preferred.",
      "type": "object",
      "required": [
        "bytes",
        "cl_type"
      ],
      "properties": {
        "cl_type": {
          "$ref": "#/definitions/CLType"
        },
        "bytes": {
          "type": "string"
        },
        "parsed": true
      },
      "additionalProperties": false
    },
    "CLType": {
      "description": "Casper types, i.e. types which can be stored and manipulated by smart contracts.\n\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).",
      "oneOf": [
        {
          "description": "`bool` primitive.",
          "type": "string",
          "enum": [
            "Bool"
          ]
        },
        {
          "description": "`i32` primitive.",
          "type": "string",
          "enum": [
            "I32"
          ]
        },
        {
          "description": "`i64` primitive.",
          "type": "string",
          "enum": [
            "I64"
          ]
        },
        {
          "description": "`u8` primitive.",
          "type": "string",
          "enum": [
            "U8"
          ]
        },
        {
          "description": "`u32` primitive.",
          "type": "string",
          "enum": [
            "U32"
          ]
        },
        {
          "description": "`u64` primitive.",
          "type": "string",
          "enum": [
            "U64"
          ]
        },
        {
          "description": "[`U128`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U128"
          ]
        },
        {
          "description": "[`U256`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U256"
          ]
        },
        {
          "description": "[`U512`] large unsigned integer type.",
          "type": "string",
          "enum": [
            "U512"
          ]
        },
        {
          "description": "`()` primitive.",
          "type": "string",
          "enum": [
            "Unit"
          ]
        },
        {
          "description": "`String` primitive.",
          "type": "string",
          "enum": [
            "String"
          ]
        },
        {
          "description": "[`Key`] system type.",
          "type": "string",
          "enum": [
            "Key"
          ]
        },
        {
          "description": "[`URef`] system type.",
          "type": "string",
          "enum": [
            "URef"
          ]
        },
        {
          "description": "[`PublicKey`](crate::PublicKey) system type.",
          "type": "string",
          "enum": [
            "PublicKey"
          ]
        },
        {
          "description": "`Option` of a `CLType`.",
          "type": "object",
          "required": [
            "Option"
          ],
          "properties": {
            "Option": {
              "$ref": "#/definitions/CLType"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Variable-length list of a single `CLType` (comparable to a `Vec`).",
          "type": "object",
          "required": [
            "List"
          ],
          "properties": {
            "List": {
              "$ref": "#/definitions/CLType"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Fixed-length list of a single `CLType` (comparable to a Rust array).",
          "type": "object",
          "required": [
            "ByteArray"
          ],
          "properties": {
            "ByteArray": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "`Result` with `Ok` and `Err` variants of `CLType`s.",
          "type": "object",
          "required": [
            "Result"
          ],
          "properties": {
            "Result": {
              "type": "object",
              "required": [
                "err",
                "ok"
              ],
              "properties": {
                "ok": {
                  "$ref": "#/definitions/CLType"
                },
                "err": {
                  "$ref": "#/definitions/CLType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Map with keys of a single `CLType` and values of a single `CLType`.",
          "type": "object",
          "required": [
            "Map"
          ],
          "properties": {
            "Map": {
              "type": "object",
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "$ref": "#/definitions/CLType"
                },
                "value": {
                  "$ref": "#/definitions/CLType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "1-ary tuple of a `CLType`.",
          "type": "object",
          "required": [
            "Tuple1"
          ],
          "properties": {
            "Tuple1": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 1,
              "minItems": 1
            }
          },
          "additionalProperties": false
        },
        {
          "description": "2-ary tuple of `CLType`s.",
          "type": "object",
          "required": [
            "Tuple2"
          ],
          "properties": {
            "Tuple2": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "description": "3-ary tuple of `CLType`s.",
          "type": "object",
          "required": [
            "Tuple3"
          ],
          "properties": {
            "Tuple3": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CLType"
              },
              "maxItems": 3,
              "minItems": 3
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unspecified type.",
          "type": "string",
          "enum": [
            "Any"
          ]
        }
      ]
    },
    "Approval": {
      "description": "A struct containing a signature of a deploy hash and the public key of the signer.",
      "type": "object",
      "required": [
        "signature",
        "signer"
      ],
      "properties": {
        "signer": {
          "$ref": "#/definitions/PublicKey"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        }
      },
      "additionalProperties": false
    },
    "ExecutionResult": {
      "description": "The result of executing a single deploy.",
      "oneOf": [
        {
          "description": "The result of a failed execution.",
          "type": "object",
          "required": [
            "Failure"
          ],
          "properties": {
            "Failure": {
              "type": "object",
              "required": [
                "cost",
                "effects",
                "error_message",
                "transfers"
              ],
              "properties": {
                "effects": {
                  "description": "The effects of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExecutionJournal"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost in Motes of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                },
                "error_message": {
                  "description": "The error message associated with executing the deploy.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The result of a successful execution.",
          "type": "object",
          "required": [
            "Success"
          ],
          "properties": {
            "Success": {
              "type": "object",
              "required": [
                "cost",
                "effects",
                "transfers"
              ],
              "properties": {
                "effects": {
                  "description": "The effects of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExecutionJournal"
                    }
                  ]
                },
                "transfers": {
                  "description": "A record of transfers performed while executing the deploy.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TransferAddr"
                  }
                },
                "cost": {
                  "description": "The cost in Motes of executing the deploy.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ExecutionJournal": {
      "description": "A log of all transforms produced during execution.",
      "type": "object",
      "required": [
        "operations",
        "transforms"
      ],
      "properties": {
        "operations": {
          "description": "The resulting operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        },
        "transforms": {
          "description": "The journal of execution transforms.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transform"
          }
        }
      }
    },
    "Operation": {
      "description": "An operation performed while executing a deploy.",
      "type": "object",
      "required": [
        "key",
        "kind"
      ],
      "properties": {
        "key": {
          "description": "The `Key` under which the operation was performed.",
          "allOf": [
            {
              "$ref": "#/definitions/Key"
            }
          ]
        },
        "kind": {
          "description": "The type of operation.",
          "allOf": [
            {
              "$ref": "#/definitions/OpKind"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Key": {
      "description": "The key as a formatted string, under which data (e.g. `CLValue`s, smart contracts, user accounts) are stored in global state.",
      "type": "string"
    },
    "OpKind": {
      "description": "The type of operation performed while executing a deploy.",
      "oneOf": [
        {
          "description": "A read operation.",
          "type": "string",
          "enum": [
            "Read"
          ]
        },
        {
          "description": "A write operation.",
          "type": "string",
          "enum": [
            "Write"
          ]
        },
        {
          "description": "An addition.",
          "type": "string",
          "enum": [
            "Add"
          ]
        },
        {
          "description": "An operation which has no effect.",
          "type": "string",
          "enum": [
            "NoOp"
          ]
        }
      ]
    },
    "Transform": {
      "description": "A transformation performed while executing a deploy.",
      "type": "object",
      "required": [
        "key",
        "kind"
      ],
      "properties": {
        "key": {
          "$ref": "#/definitions/Key"
        },
        "kind": {
          "$ref": "#/definitions/TransformKind"
        }
      },
      "additionalProperties": false
    },
    "TransformKind": {
      "description": "Representation of a single transformation occurring during execution.\n\nNote that all arithmetic variants of [`TransformKind`] are commutative which means that a given collection of them can be executed in any order to produce the same end result.",
      "oneOf": [
        {
          "description": "An identity transformation that does not modify a value in the global state.\n\nCreated as a result of reading from the global state.",
          "type": "string",
          "enum": [
            "Identity"
          ]
        },
        {
          "description": "Writes a new value in the global state.",
          "type": "object",
          "required": [
            "Write"
          ],
          "properties": {
            "Write": {
              "$ref": "#/definitions/StoredValue"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A wrapping addition of an `i32` to an existing numeric value (not necessarily an `i32`) in the global state.",
          "type": "object",
          "required": [
            "AddInt32"
          ],
          "properties": {
            "AddInt32": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A wrapping addition of a `u64` to an existing numeric value (not necessarily an `u64`) in the global state.",
          "type": "object",
          "required": [
            "AddUInt64"
          ],
          "properties": {
            "AddUInt64": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A wrapping addition of a `U128` to an existing numeric value (not necessarily an `U128`) in the global state.",
          "type": "object",
          "required": [
            "AddUInt128"
          ],
          "properties": {
            "AddUInt128": {
              "$ref": "#/definitions/U128"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A wrapping addition of a `U256` to an existing numeric value (not necessarily an `U256`) in the global state.",
          "type": "object",
          "required": [
            "AddUInt256"
          ],
          "properties": {
            "AddUInt256": {
              "$ref": "#/definitions/U256"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A wrapping addition of a `U512` to an existing numeric value (not necessarily an `U512`) in the global state.",
          "type": "object",
          "required": [
            "AddUInt512"
          ],
          "properties": {
            "AddUInt512": {
              "$ref": "#/definitions/U512"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Adds new named keys to an existing entry in the global state.\n\nThis transform assumes that the existing stored value is either an Account or a Contract.",
          "type": "object",
          "required": [
            "AddKeys"
          ],
          "properties": {
            "AddKeys": {
              "$ref": "#/definitions/NamedKeys"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents the case where applying a transform would cause an error.",
          "type": "object",
          "required": [
            "Failure"
          ],
          "properties": {
            "Failure": {
              "$ref": "#/definitions/TransformError"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StoredValue": {
      "description": "A value stored in Global State.",
      "oneOf": [
        {
          "description": "A CLValue.",
          "type": "object",
          "required": [
            "CLValue"
          ],
          "properties": {
            "CLValue": {
              "$ref": "#/definitions/CLValue"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An account.",
          "type": "object",
          "required": [
            "Account"
          ],
          "properties": {
            "Account": {
              "$ref": "#/definitions/Account"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A contract Wasm.",
          "type": "object",
          "required": [
            "ContractWasm"
          ],
          "properties": {
            "ContractWasm": {
              "$ref": "#/definitions/ContractWasm"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A contract.",
          "type": "object",
          "required": [
            "Contract"
          ],
          "properties": {
            "Contract": {
              "$ref": "#/definitions/Contract"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A contract package.",
          "type": "object",
          "required": [
            "ContractPackage"
          ],
          "properties": {
            "ContractPackage": {
              "$ref": "#/definitions/ContractPackage"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A transfer.",
          "type": "object",
          "required": [
            "Transfer"
          ],
          "properties": {
            "Transfer": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Info about a deploy.",
          "type": "object",
          "required": [
            "DeployInfo"
          ],
          "properties": {
            "DeployInfo": {
              "$ref": "#/definitions/DeployInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Info about an era.",
          "type": "object",
          "required": [
            "EraInfo"
          ],
          "properties": {
            "EraInfo": {
              "$ref": "#/definitions/EraInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A bid.",
          "type": "object",
          "required": [
            "Bid"
          ],
          "properties": {
            "Bid": {
              "$ref": "#/definitions/Bid"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw information.",
          "type": "object",
          "required": [
            "Withdraw"
          ],
          "properties": {
            "Withdraw": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WithdrawPurse"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unbonding information.",
          "type": "object",
          "required": [
            "Unbonding"
          ],
          "properties": {
            "Unbonding": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnbondingPurse"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Account": {
      "description": "Represents an Account in the global state.",
      "type": "object",
      "required": [
        "account_hash",
        "action_thresholds",
        "associated_keys",
        "main_purse",
        "named_keys"
      ],
      "properties": {
        "account_hash": {
          "$ref": "#/definitions/AccountHash"
        },
        "named_keys": {
          "$ref": "#/definitions/NamedKeys"
        },
        "main_purse": {
          "$ref": "#/definitions/URef"
        },
        "associated_keys": {
          "$ref": "#/definitions/AssociatedKeys"
        },
        "action_thresholds": {
          "$ref": "#/definitions/ActionThresholds"
        }
      },
      "additionalProperties": false
    },
    "AccountHash": {
      "description": "Account hash as a formatted string.",
      "type": "string"
    },
    "NamedKeys": {
      "description": "A collection of named keys.",
      "allOf": [
        {
          "$ref": "#/definitions/Array_of_NamedKey"
        }
      ]
    },
    "Array_of_NamedKey": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NamedKey"
      }
    },
    "NamedKey": {
      "description": "A key with a name.",
      "type": "object",
      "required": [
        "key",
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the entry.",
          "type": "string"
        },
        "key": {
          "description": "The value of the entry: a casper `Key` type.",
          "allOf": [
            {
              "$ref": "#/definitions/Key"
            }
          ]
        }
      }
    },
    "URef": {
      "description": "Hex-encoded, formatted URef.",
      "type": "string"
    },
    "AssociatedKeys": {
      "description": "A collection of weighted public keys (represented as account hashes) associated with an account.",
      "allOf": [
        {
          "$ref": "#/definitions/Array_of_AssociatedKey"
        }
      ]
    },
    "Array_of_AssociatedKey": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssociatedKey"
      }
    },
    "AssociatedKey": {
      "description": "A weighted public key.",
      "type": "object",
      "required": [
        "account_hash",
        "weight"
      ],
      "properties": {
        "account_hash": {
          "description": "The account hash of the public key.",
          "allOf": [
            {
              "$ref": "#/definitions/AccountHash"
            }
          ]
        },
        "weight": {
          "description": "The weight assigned to the public key.",
          "allOf": [
            {
              "$ref": "#/definitions/Weight"
            }
          ]
        }
      }
    },
    "Weight": {
      "description": "The weight associated with public keys in an account's associated keys.",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "ActionThresholds": {
      "description": "Thresholds that have to be met when executing an action of a certain type.",
      "type": "object",
      "required": [
        "deployment",
        "key_management"
      ],
      "properties": {
        "deployment": {
          "description": "Threshold for deploy execution.",
          "allOf": [
            {
              "$ref": "#/definitions/Weight"
            }
          ]
        },
        "key_management": {
          "description": "Threshold for managing action threshold.",
          "allOf": [
            {
              "$ref": "#/definitions/Weight"
            }
          ]
        }
      }
    },
    "ContractWasm": {
      "description": "A container for contract's WASM bytes.",
      "type": "object",
      "required": [
        "bytes"
      ],
      "properties": {
        "bytes": {
          "$ref": "#/definitions/Bytes"
        }
      }
    },
    "Bytes": {
      "description": "Hex-encoded array of bytes.",
      "type": "string"
    },
    "Contract": {
      "description": "Methods and type signatures supported by a contract.",
      "type": "object",
      "required": [
        "contract_package_hash",
        "contract_wasm_hash",
        "entry_points",
        "named_keys",
        "protocol_version"
      ],
      "properties": {
        "contract_package_hash": {
          "$ref": "#/definitions/ContractPackageHash"
        },
        "contract_wasm_hash": {
          "$ref": "#/definitions/ContractWasmHash"
        },
        "named_keys": {
          "$ref": "#/definitions/NamedKeys"
        },
        "entry_points": {
          "$ref": "#/definitions/Array_of_NamedEntryPoint"
        },
        "protocol_version": {
          "$ref": "#/definitions/ProtocolVersion"
        }
      }
    },
    "ContractPackageHash": {
      "description": "The hex-encoded hash address of the contract package.",
      "type": "string"
    },
    "ContractWasmHash": {
      "description": "The hash address of the contract wasm",
      "type": "string"
    },
    "Array_of_NamedEntryPoint": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NamedEntryPoint"
      }
    },
    "NamedEntryPoint": {
      "type": "object",
      "required": [
        "entry_point",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "entry_point": {
          "allOf": [
            {
              "$ref": "#/definitions/EntryPoint"
            }
          ]
        }
      }
    },
    "EntryPoint": {
      "description": "Type signature of a method. Order of arguments matter since can be referenced by index as well as name.",
      "type": "object",
      "required": [
        "access",
        "args",
        "entry_point_type",
        "name",
        "ret"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "ret": {
          "$ref": "#/definitions/CLType"
        },
        "access": {
          "$ref": "#/definitions/EntryPointAccess"
        },
        "entry_point_type": {
          "$ref": "#/definitions/EntryPointType"
        }
      }
    },
    "Parameter": {
      "description": "Parameter to a method",
      "type": "object",
      "required": [
        "cl_type",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "cl_type": {
          "$ref": "#/definitions/CLType"
        }
      }
    },
    "EntryPointAccess": {
      "description": "Enum describing the possible access control options for a contract entry point (method).",
      "oneOf": [
        {
          "description": "Anyone can call this method (no access controls).",
          "type": "string",
          "enum": [
            "Public"
          ]
        },
        {
          "description": "Only users from the listed groups may call this method. Note: if the list is empty then this method is not callable from outside the contract.",
          "type": "object",
          "required": [
            "Groups"
          ],
          "properties": {
            "Groups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Group": {
      "description": "A (labelled) \"user group\". Each method of a versioned contract may be associated with one or more user groups which are allowed to call it.",
      "type": "string"
    },
    "EntryPointType": {
      "description": "Context of method execution",
      "oneOf": [
        {
          "description": "Runs as session code",
          "type": "string",
          "enum": [
            "Session"
          ]
        },
        {
          "description": "Runs within contract's context",
          "type": "string",
          "enum": [
            "Contract"
          ]
        }
      ]
    },
    "ContractPackage": {
      "description": "Contract definition, metadata, and security container.",
      "type": "object",
      "required": [
        "access_key",
        "disabled_versions",
        "groups",
        "lock_status",
        "versions"
      ],
      "properties": {
        "access_key": {
          "description": "Key used to add or disable versions.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "versions": {
          "description": "All versions (enabled & disabled).",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_ContractVersionAndHash"
            }
          ]
        },
        "disabled_versions": {
          "description": "Collection of disabled contract versions. The runtime will not permit disabled contract versions to be executed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContractVersionKey"
          },
          "uniqueItems": true
        },
        "groups": {
          "description": "Mapping maintaining the set of URefs associated with each \"user group\". This can be used to control access to methods in a particular version of the contract. A method is callable by any context which \"knows\" any of the URefs associated with the method's user group.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_NamedUserGroup"
            }
          ]
        },
        "lock_status": {
          "description": "A flag that determines whether a contract is locked or not.",
          "allOf": [
            {
              "$ref": "#/definitions/ContractPackageStatus"
            }
          ]
        }
      }
    },
    "Array_of_ContractVersionAndHash": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContractVersionAndHash"
      }
    },
    "ContractVersionAndHash": {
      "type": "object",
      "required": [
        "contract_hash",
        "contract_version_key"
      ],
      "properties": {
        "contract_version_key": {
          "allOf": [
            {
              "$ref": "#/definitions/ContractVersionKey"
            }
          ]
        },
        "contract_hash": {
          "allOf": [
            {
              "$ref": "#/definitions/ContractHash"
            }
          ]
        }
      }
    },
    "ContractVersionKey": {
      "description": "Major element of `ProtocolVersion` combined with `ContractVersion`.",
      "type": "object",
      "required": [
        "contract_version",
        "protocol_version_major"
      ],
      "properties": {
        "protocol_version_major": {
          "description": "Major element of `ProtocolVersion` a `ContractVersion` is compatible with.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "contract_version": {
          "description": "Automatically incremented value for a contract version within a major `ProtocolVersion`.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ContractHash": {
      "description": "The hex-encoded hash address of the contract.",
      "type": "string"
    },
    "Array_of_NamedUserGroup": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NamedUserGroup"
      }
    },
    "NamedUserGroup": {
      "type": "object",
      "required": [
        "group_name",
        "group_users"
      ],
      "properties": {
        "group_name": {
          "allOf": [
            {
              "$ref": "#/definitions/Group"
            }
          ]
        },
        "group_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/URef"
          },
          "uniqueItems": true
        }
      }
    },
    "ContractPackageStatus": {
      "description": "A enum to determine the lock status of the contract package.",
      "oneOf": [
        {
          "description": "The package is locked and cannot be versioned.",
          "type": "string",
          "enum": [
            "Locked"
          ]
        },
        {
          "description": "The package is unlocked and can be versioned.",
          "type": "string",
          "enum": [
            "Unlocked"
          ]
        }
      ]
    },
    "Transfer": {
      "description": "Represents a transfer from one purse to another",
      "type": "object",
      "required": [
        "amount",
        "deploy_hash",
        "from",
        "gas",
        "source",
        "target"
      ],
      "properties": {
        "deploy_hash": {
          "description": "Hex-encoded Deploy hash of Deploy that created the transfer.",
          "allOf": [
            {
              "$ref": "#/definitions/DeployHash"
            }
          ]
        },
        "from": {
          "description": "Account from which transfer was executed",
          "allOf": [
            {
              "$ref": "#/definitions/AccountHash"
            }
          ]
        },
        "to": {
          "description": "Account to which funds are transferred",
          "anyOf": [
            {
              "$ref": "#/definitions/AccountHash"
            },
            {
              "type": "null"
            }
          ]
        },
        "source": {
          "description": "Source purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "target": {
          "description": "Target purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "amount": {
          "description": "Transfer amount",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "gas": {
          "description": "Gas",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "id": {
          "description": "User-defined id",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "DeployInfo": {
      "description": "Information relating to the given Deploy.",
      "type": "object",
      "required": [
        "deploy_hash",
        "from",
        "gas",
        "source",
        "transfers"
      ],
      "properties": {
        "deploy_hash": {
          "description": "Hex-encoded Deploy hash.",
          "allOf": [
            {
              "$ref": "#/definitions/DeployHash"
            }
          ]
        },
        "transfers": {
          "description": "Transfers performed by the Deploy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferAddr"
          }
        },
        "from": {
          "description": "Account identifier of the creator of the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/AccountHash"
            }
          ]
        },
        "source": {
          "description": "Source purse used for payment of the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "gas": {
          "description": "Gas cost of executing the Deploy.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TransferAddr": {
      "description": "Hex-encoded transfer address.",
      "type": "string"
    },
    "EraInfo": {
      "description": "Auction metadata.  Intended to be recorded at each era.",
      "type": "object",
      "required": [
        "seigniorage_allocations"
      ],
      "properties": {
        "seigniorage_allocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeigniorageAllocation"
          }
        }
      },
      "additionalProperties": false
    },
    "SeigniorageAllocation": {
      "description": "Information about a seigniorage allocation",
      "oneOf": [
        {
          "description": "Info about a seigniorage allocation for a validator",
          "type": "object",
          "required": [
            "Validator"
          ],
          "properties": {
            "Validator": {
              "type": "object",
              "required": [
                "amount",
                "validator_public_key"
              ],
              "properties": {
                "validator_public_key": {
                  "description": "Validator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "amount": {
                  "description": "Allocated amount",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Info about a seigniorage allocation for a delegator",
          "type": "object",
          "required": [
            "Delegator"
          ],
          "properties": {
            "Delegator": {
              "type": "object",
              "required": [
                "amount",
                "delegator_public_key",
                "validator_public_key"
              ],
              "properties": {
                "delegator_public_key": {
                  "description": "Delegator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "validator_public_key": {
                  "description": "Validator's public key",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PublicKey"
                    }
                  ]
                },
                "amount": {
                  "description": "Allocated amount",
                  "allOf": [
                    {
                      "$ref": "#/definitions/U512"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Bid": {
      "description": "An entry in the validator map.",
      "type": "object",
      "required": [
        "bonding_purse",
        "delegation_rate",
        "delegators",
        "inactive",
        "staked_amount",
        "validator_public_key"
      ],
      "properties": {
        "validator_public_key": {
          "description": "Validator public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "bonding_purse": {
          "description": "The purse that was used for bonding.",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "staked_amount": {
          "description": "The amount of tokens staked by a validator (not including delegators).",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "delegation_rate": {
          "description": "Delegation rate.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "vesting_schedule": {
          "description": "Vesting schedule for a genesis validator. `None` if non-genesis validator.",
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedule"
            },
            {
              "type": "null"
            }
          ]
        },
        "delegators": {
          "description": "This validator's delegators, indexed by their public keys.",
          "allOf": [
            {
              "$ref": "#/definitions/Array_of_PublicKeyAndDelegator"
            }
          ]
        },
        "inactive": {
          "description": "`true` if validator has been \"evicted\".",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VestingSchedule": {
      "type": "object",
      "required": [
        "initial_release_timestamp_millis"
      ],
      "properties": {
        "initial_release_timestamp_millis": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "locked_amounts": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/U512"
          },
          "maxItems": 14,
          "minItems": 14
        }
      },
      "additionalProperties": false
    },
    "Array_of_PublicKeyAndDelegator": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicKeyAndDelegator"
      }
    },
    "PublicKeyAndDelegator": {
      "description": "A delegator associated with the given validator.",
      "type": "object",
      "required": [
        "delegator",
        "delegator_public_key"
      ],
      "properties": {
        "delegator_public_key": {
          "description": "The public key of the delegator.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "delegator": {
          "description": "The delegator details.",
          "allOf": [
            {
              "$ref": "#/definitions/Delegator"
            }
          ]
        }
      }
    },
    "Delegator": {
      "description": "Represents a party delegating their stake to a validator (or \"delegatee\")",
      "type": "object",
      "required": [
        "bonding_purse",
        "delegator_public_key",
        "staked_amount",
        "validator_public_key"
      ],
      "properties": {
        "delegator_public_key": {
          "$ref": "#/definitions/PublicKey"
        },
        "staked_amount": {
          "$ref": "#/definitions/U512"
        },
        "bonding_purse": {
          "$ref": "#/definitions/URef"
        },
        "validator_public_key": {
          "$ref": "#/definitions/PublicKey"
        },
        "vesting_schedule": {
          "anyOf": [
            {
              "$ref": "#/definitions/VestingSchedule"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "WithdrawPurse": {
      "description": "A withdraw purse, a legacy structure.",
      "type": "object",
      "required": [
        "amount",
        "bonding_purse",
        "era_of_creation",
        "unbonder_public_key",
        "validator_public_key"
      ],
      "properties": {
        "bonding_purse": {
          "description": "Bonding Purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "validator_public_key": {
          "description": "Validators public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "unbonder_public_key": {
          "description": "Unbonders public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "era_of_creation": {
          "description": "Era in which this unbonding request was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "amount": {
          "description": "Unbonding Amount.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "UnbondingPurse": {
      "description": "Unbonding purse.",
      "type": "object",
      "required": [
        "amount",
        "bonding_purse",
        "era_of_creation",
        "unbonder_public_key",
        "validator_public_key"
      ],
      "properties": {
        "bonding_purse": {
          "description": "Bonding Purse",
          "allOf": [
            {
              "$ref": "#/definitions/URef"
            }
          ]
        },
        "validator_public_key": {
          "description": "Validators public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "unbonder_public_key": {
          "description": "Unbonders public key.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        },
        "era_of_creation": {
          "description": "Era in which this unbonding request was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "amount": {
          "description": "Unbonding Amount.",
          "allOf": [
            {
              "$ref": "#/definitions/U512"
            }
          ]
        },
        "new_validator": {
          "description": "The validator public key to re-delegate to.",
          "anyOf": [
            {
              "$ref": "#/definitions/PublicKey"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "U128": {
      "description": "Decimal representation of a 128-bit integer.",
      "type": "string"
    },
    "U256": {
      "description": "Decimal representation of a 256-bit integer.",
      "type": "string"
    },
    "TransformError": {
      "description": "Error type for applying and combining transforms.\n\nA `TypeMismatch` occurs when a transform cannot be applied because the types are not compatible (e.g. trying to add a number to a string).",
      "oneOf": [
        {
          "description": "Error while (de)serializing data.",
          "type": "object",
          "required": [
            "Serialization"
          ],
          "properties": {
            "Serialization": {
              "$ref": "#/definitions/Error"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Type mismatch error.",
          "type": "object",
          "required": [
            "TypeMismatch"
          ],
          "properties": {
            "TypeMismatch": {
              "$ref": "#/definitions/TypeMismatch"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Error": {
      "description": "Serialization and deserialization errors.",
      "oneOf": [
        {
          "description": "Early end of stream while deserializing.",
          "type": "string",
          "enum": [
            "EarlyEndOfStream"
          ]
        },
        {
          "description": "Formatting error while deserializing.",
          "type": "string",
          "enum": [
            "Formatting"
          ]
        },
        {
          "description": "Not all input bytes were consumed in [`deserialize`].",
          "type": "string",
          "enum": [
            "LeftOverBytes"
          ]
        },
        {
          "description": "Out of memory error.",
          "type": "string",
          "enum": [
            "OutOfMemory"
          ]
        },
        {
          "description": "No serialized representation is available for a value.",
          "type": "string",
          "enum": [
            "NotRepresentable"
          ]
        },
        {
          "description": "Exceeded a recursion depth limit.",
          "type": "string",
          "enum": [
            "ExceededRecursionDepth"
          ]
        }
      ]
    },
    "TypeMismatch": {
      "description": "An error struct representing a type mismatch in [`StoredValue`](crate::StoredValue) operations.",
      "type": "object",
      "required": [
        "expected",
        "found"
      ],
      "properties": {
        "expected": {
          "description": "The name of the expected type.",
          "type": "string"
        },
        "found": {
          "description": "The actual type found.",
          "type": "string"
        }
      }
    },
    "FinalitySignature": {
      "description": "A validator's signature of a block, confirming it is finalized.",
      "type": "object",
      "required": [
        "block_hash",
        "era_id",
        "public_key",
        "signature"
      ],
      "properties": {
        "block_hash": {
          "description": "The block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/BlockHash"
            }
          ]
        },
        "era_id": {
          "description": "The era in which the associated block was created.",
          "allOf": [
            {
              "$ref": "#/definitions/EraId"
            }
          ]
        },
        "signature": {
          "description": "The signature over the block hash of the associated block.",
          "allOf": [
            {
              "$ref": "#/definitions/Signature"
            }
          ]
        },
        "public_key": {
          "description": "The public key of the signing validator.",
          "allOf": [
            {
              "$ref": "#/definitions/PublicKey"
            }
          ]
        }
      }
    }
  }
}